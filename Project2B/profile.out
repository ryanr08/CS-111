Total: 888 samples
     832  93.7%  93.7%      888 100.0% listRoutine
      24   2.7%  96.4%       24   2.7% SortedList_lookup
       9   1.0%  97.4%        9   1.0% ?? /usr/src/debug////////glibc-2.17-c758a686/string/../sysdeps/x86_64/multiarch/strcmp-sse42.S:200
       6   0.7%  98.1%       32   3.6% SortedList_insert
       4   0.5%  98.5%        4   0.5% ?? /usr/src/debug////////glibc-2.17-c758a686/string/../sysdeps/x86_64/multiarch/strcmp-sse42.S:1721
       3   0.3%  98.9%        3   0.3% ?? /usr/src/debug////////glibc-2.17-c758a686/string/../sysdeps/x86_64/multiarch/strcmp-sse42.S:1720
       3   0.3%  99.2%        3   0.3% ?? /usr/src/debug////////glibc-2.17-c758a686/string/../sysdeps/x86_64/multiarch/strcmp-sse42.S:1729
       2   0.2%  99.4%        2   0.2% ?? /usr/src/debug////////glibc-2.17-c758a686/string/../sysdeps/x86_64/multiarch/strcmp-sse42.S:130
       1   0.1%  99.5%        1   0.1% ?? /usr/src/debug////////glibc-2.17-c758a686/string/../sysdeps/x86_64/multiarch/strcmp-sse42.S:160
       1   0.1%  99.7%        1   0.1% ?? /usr/src/debug////////glibc-2.17-c758a686/string/../sysdeps/x86_64/multiarch/strcmp-sse42.S:204
       1   0.1%  99.8%        1   0.1% ?? /usr/src/debug////////glibc-2.17-c758a686/string/../sysdeps/x86_64/multiarch/strcmp-sse42.S:205
       1   0.1%  99.9%        1   0.1% ?? /usr/src/debug////////glibc-2.17-c758a686/string/../sysdeps/x86_64/multiarch/strcmp-sse42.S:1730
       1   0.1% 100.0%        1   0.1% _init
       0   0.0% 100.0%      888 100.0% ?? /usr/src/debug////////glibc-2.17-c758a686/misc/../sysdeps/unix/sysv/linux/x86_64/clone.S:111
       0   0.0% 100.0%      888 100.0% start_thread
ROUTINE ====================== listRoutine in /u/cs/ugrad/riahi/cs111/Project2B/lab2_list.c
   832    888 Total samples (flat / cumulative)
     .      .   65:         }
     .      .   66:     }
     .      .   67: }
     .      .   68: 
     .      .   69: void *listRoutine(void *arg)
---
     .      .   70: {
     .      .   71:     int *threadNum = (int *)(arg);
     .      .   72: 
     .      .   73:     int i = *threadNum * iterations;
     .      .   74: 
     .      .   75:     for (; i < (*threadNum + 1) * iterations; i++)
     .      .   76:     {
     .      .   77:         if (listOption[0] == 'N')
     .      .   78:         {
     .      .   79:             SortedList_insert(list, &elements[i]);
     .      .   80:         }
     .      .   81:         else if (listOption[0] == 'm')
     .      .   82:         {
     .      .   83:             pthread_mutex_lock(&lock);
     .      .   84:             SortedList_insert(list, &elements[i]);
     .      .   85:             pthread_mutex_unlock(&lock);
     .      .   86:         }
     .      .   87:         else if (listOption[0] == 's')
     .      .   88:         {
   539    539   89:             while (__sync_lock_test_and_set(&spinlock, 1))
     .      .   90:                 ;
     1     33   91:             SortedList_insert(list, &elements[i]);
     .      .   92:             __sync_lock_release(&spinlock);
     .      .   93:         }
     .      .   94:     }
     .      .   95: 
     .      .   96:     int len;
     .      .   97:     if (listOption[0] == 'N')
     .      .   98:     {
     .      .   99:         len = SortedList_length(list);
     .      .  100:         if (len == -1)
     .      .  101:         {
     .      .  102:             fprintf(stderr, "Error getting length of list: Corrupted List\n");
     .      .  103:             exit(2);
     .      .  104:         }
     .      .  105:     }
     .      .  106:     else if (listOption[0] == 'm')
     .      .  107:     {
     .      .  108:         pthread_mutex_lock(&lock);
     .      .  109:         len = SortedList_length(list);
     .      .  110:         if (len == -1)
     .      .  111:         {
     .      .  112:             fprintf(stderr, "Error getting length of list: Corrupted List\n");
     .      .  113:             exit(2);
     .      .  114:         }
     .      .  115:         pthread_mutex_unlock(&lock);
     .      .  116:     }
     .      .  117:     else if (listOption[0] == 's')
     .      .  118:     {
     .      .  119:         while (__sync_lock_test_and_set(&spinlock, 1))
     .      .  120:             ;
     .      .  121:         len = SortedList_length(list);
     .      .  122:         if (len == -1)
     .      .  123:         {
     .      .  124:             fprintf(stderr, "Error getting length of list: Corrupted List\n");
     .      .  125:             exit(2);
     .      .  126:         }
     .      .  127:         __sync_lock_release(&spinlock);
     .      .  128:     }
     .      .  129: 
     .      .  130:     SortedListElement_t *element;
     .      .  131: 
     .      .  132:     int j = *threadNum * iterations;
     .      .  133:     for (; j < (*threadNum + 1) * iterations; j++)
     .      .  134:     {
     .      .  135:         if (listOption[0] == 'N')
     .      .  136:         {
     .      .  137:             element = SortedList_lookup(list, elements[j].key);
     .      .  138:             if (element == NULL)
     .      .  139:             {
     .      .  140:                 fprintf(stderr, "Error looking up element: Corrupted List\n");
     .      .  141:                 exit(2);
     .      .  142:             }
     .      .  143:             if (SortedList_delete(element) == 1)
     .      .  144:             {
     .      .  145:                 fprintf(stderr, "Error deleting element: Corrupted List\n");
     .      .  146:                 exit(2);
     .      .  147:             }
     .      .  148:         }
     .      .  149:         else if (listOption[0] == 'm')
     .      .  150:         {
     .      .  151:             pthread_mutex_lock(&lock);
     .      .  152:             element = SortedList_lookup(list, elements[j].key);
     .      .  153:             if (element == NULL)
     .      .  154:             {
     .      .  155:                 fprintf(stderr, "Error looking up Element: Corrupted List\n");
     .      .  156:                 exit(2);
     .      .  157:             }
     .      .  158:             if (SortedList_delete(element) == 1)
     .      .  159:             {
     .      .  160:                 fprintf(stderr, "Error deleting element: Corrupted List\n");
     .      .  161:                 exit(2);
     .      .  162:             }
     .      .  163:             pthread_mutex_unlock(&lock);
     .      .  164:         }
     .      .  165:         else if (listOption[0] == 's')
     .      .  166:         {
   292    292  167:             while (__sync_lock_test_and_set(&spinlock, 1))
     .      .  168:                 ;
     .     24  169:             element = SortedList_lookup(list, elements[j].key);
     .      .  170:             if (element == NULL)
     .      .  171:             {
     .      .  172:                 fprintf(stderr, "Error looking up Element: Corrupted List\n");
     .      .  173:                 exit(2);
     .      .  174:             }
     .      .  175:             if (SortedList_delete(element) == 1)
     .      .  176:             {
     .      .  177:                 fprintf(stderr, "Error deleting element: Corrupted List\n");
     .      .  178:                 exit(2);
     .      .  179:             }
     .      .  180:             __sync_lock_release(&spinlock);
     .      .  181:         }
     .      .  182:     }
     .      .  183: 
     .      .  184:     return NULL;
     .      .  185: }
---
     .      .  186: 
     .      .  187: int main(int argc, char **argv)
     .      .  188: {
     .      .  189:     signal(SIGSEGV, signalHandler);
     .      .  190:     char testname[15] = "list-\0";
ROUTINE ====================== listRoutine in /u/cs/ugrad/riahi/cs111/Project2B/lab2_list.c
   832    888 Total samples (flat / cumulative)
     .      .   65:         }
     .      .   66:     }
     .      .   67: }
     .      .   68: 
     .      .   69: void *listRoutine(void *arg)
---
     .      .   70: {
     .      .   71:     int *threadNum = (int *)(arg);
     .      .   72: 
     .      .   73:     int i = *threadNum * iterations;
     .      .   74: 
     .      .   75:     for (; i < (*threadNum + 1) * iterations; i++)
     .      .   76:     {
     .      .   77:         if (listOption[0] == 'N')
     .      .   78:         {
     .      .   79:             SortedList_insert(list, &elements[i]);
     .      .   80:         }
     .      .   81:         else if (listOption[0] == 'm')
     .      .   82:         {
     .      .   83:             pthread_mutex_lock(&lock);
     .      .   84:             SortedList_insert(list, &elements[i]);
     .      .   85:             pthread_mutex_unlock(&lock);
     .      .   86:         }
     .      .   87:         else if (listOption[0] == 's')
     .      .   88:         {
   539    539   89:             while (__sync_lock_test_and_set(&spinlock, 1))
     .      .   90:                 ;
     1     33   91:             SortedList_insert(list, &elements[i]);
     .      .   92:             __sync_lock_release(&spinlock);
     .      .   93:         }
     .      .   94:     }
     .      .   95: 
     .      .   96:     int len;
     .      .   97:     if (listOption[0] == 'N')
     .      .   98:     {
     .      .   99:         len = SortedList_length(list);
     .      .  100:         if (len == -1)
     .      .  101:         {
     .      .  102:             fprintf(stderr, "Error getting length of list: Corrupted List\n");
     .      .  103:             exit(2);
     .      .  104:         }
     .      .  105:     }
     .      .  106:     else if (listOption[0] == 'm')
     .      .  107:     {
     .      .  108:         pthread_mutex_lock(&lock);
     .      .  109:         len = SortedList_length(list);
     .      .  110:         if (len == -1)
     .      .  111:         {
     .      .  112:             fprintf(stderr, "Error getting length of list: Corrupted List\n");
     .      .  113:             exit(2);
     .      .  114:         }
     .      .  115:         pthread_mutex_unlock(&lock);
     .      .  116:     }
     .      .  117:     else if (listOption[0] == 's')
     .      .  118:     {
     .      .  119:         while (__sync_lock_test_and_set(&spinlock, 1))
     .      .  120:             ;
     .      .  121:         len = SortedList_length(list);
     .      .  122:         if (len == -1)
     .      .  123:         {
     .      .  124:             fprintf(stderr, "Error getting length of list: Corrupted List\n");
     .      .  125:             exit(2);
     .      .  126:         }
     .      .  127:         __sync_lock_release(&spinlock);
     .      .  128:     }
     .      .  129: 
     .      .  130:     SortedListElement_t *element;
     .      .  131: 
     .      .  132:     int j = *threadNum * iterations;
     .      .  133:     for (; j < (*threadNum + 1) * iterations; j++)
     .      .  134:     {
     .      .  135:         if (listOption[0] == 'N')
     .      .  136:         {
     .      .  137:             element = SortedList_lookup(list, elements[j].key);
     .      .  138:             if (element == NULL)
     .      .  139:             {
     .      .  140:                 fprintf(stderr, "Error looking up element: Corrupted List\n");
     .      .  141:                 exit(2);
     .      .  142:             }
     .      .  143:             if (SortedList_delete(element) == 1)
     .      .  144:             {
     .      .  145:                 fprintf(stderr, "Error deleting element: Corrupted List\n");
     .      .  146:                 exit(2);
     .      .  147:             }
     .      .  148:         }
     .      .  149:         else if (listOption[0] == 'm')
     .      .  150:         {
     .      .  151:             pthread_mutex_lock(&lock);
     .      .  152:             element = SortedList_lookup(list, elements[j].key);
     .      .  153:             if (element == NULL)
     .      .  154:             {
     .      .  155:                 fprintf(stderr, "Error looking up Element: Corrupted List\n");
     .      .  156:                 exit(2);
     .      .  157:             }
     .      .  158:             if (SortedList_delete(element) == 1)
     .      .  159:             {
     .      .  160:                 fprintf(stderr, "Error deleting element: Corrupted List\n");
     .      .  161:                 exit(2);
     .      .  162:             }
     .      .  163:             pthread_mutex_unlock(&lock);
     .      .  164:         }
     .      .  165:         else if (listOption[0] == 's')
     .      .  166:         {
   292    292  167:             while (__sync_lock_test_and_set(&spinlock, 1))
     .      .  168:                 ;
     .     24  169:             element = SortedList_lookup(list, elements[j].key);
     .      .  170:             if (element == NULL)
     .      .  171:             {
     .      .  172:                 fprintf(stderr, "Error looking up Element: Corrupted List\n");
     .      .  173:                 exit(2);
     .      .  174:             }
     .      .  175:             if (SortedList_delete(element) == 1)
     .      .  176:             {
     .      .  177:                 fprintf(stderr, "Error deleting element: Corrupted List\n");
     .      .  178:                 exit(2);
     .      .  179:             }
     .      .  180:             __sync_lock_release(&spinlock);
     .      .  181:         }
     .      .  182:     }
     .      .  183: 
     .      .  184:     return NULL;
     .      .  185: }
---
     .      .  186: 
     .      .  187: int main(int argc, char **argv)
     .      .  188: {
     .      .  189:     signal(SIGSEGV, signalHandler);
     .      .  190:     char testname[15] = "list-\0";
